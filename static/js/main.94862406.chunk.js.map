{"version":3,"sources":["Components/Formulario.js","Components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94862406.chunk.js","sourcesContent":["import React, { Fragment , useState} from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\n//primero se instala luego se importa sirve para generar id sin una base de datos\r\n//----npm install uuid\r\n\r\nconst Formulario = ({crearCita}) => {\r\n\r\n  // Crear state de citas\r\n  const [cita, actualizarCita]= useState({\r\n    mascota:'',\r\n    propietario:'',\r\n    fecha:'',\r\n    hora:'',\r\n    sintomas:''\r\n  });\r\n\r\n//Agregando un segundo state\r\n  const [error, actualizarError]= useState(false)\r\n\r\n//Funcion que guarda los valores ingresados dentro de un state\r\n  const actualizarState = e =>{\r\n    actualizarCita({\r\n      ...cita,\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  //Extraer los valores\r\n  //Esto es un destructuring(simplifica el codigo)\r\n  const {mascota, propietario,fecha,hora,sintomas}=cita;\r\n\r\n  //Agregando Usuario\r\n  const submitCita = e =>{\r\n      e.preventDefault();\r\n\r\n      //Validar\r\n      if(mascota.trim() ==='' || propietario.trim() ==='' || fecha.trim() ==='' ||hora.trim() ==='' ||sintomas.trim() ===''){\r\n        actualizarError(true);\r\n        return;\r\n      }\r\n\r\n      //Elimando el mensaje previo de error\r\n      actualizarError(false);\r\n \r\n      //Asignado un ID\r\n      cita.id = uuidv4();;\r\n  \r\n\r\n      //Crear una cita\r\n      crearCita(cita);\r\n\r\n      //Reiniciar el form\r\n      actualizarCita({\r\n        mascota:'',\r\n        propietario:'',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n      })\r\n      \r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear Cita</h2>\r\n\r\n\r\n\r\n      {/* Agregando si existe un error al ingresar datos */}\r\n      {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p>\r\n      : null\r\n      }\r\n\r\n      <form\r\n      // Agregando un evento en el formulario\r\n        onSubmit={submitCita}\r\n      >\r\n        <label>Nombre Mascota</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Mascota\"\r\n          //agregando un evento de guardar datos ingresados dentro del state\r\n          onChange={actualizarState}\r\n          //Valor para resetear formulario\r\n          value={mascota}\r\n        />\r\n\r\n        <label>Nombre Dueño</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"propietario\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Nombre Dueño de la mascota\"\r\n          onChange={actualizarState}\r\n          value={propietario}\r\n        />\r\n\r\n        <label>Fecha</label>\r\n        <input type=\"date\" name=\"fecha\" className=\"u-full-width\" onChange={actualizarState} value={fecha}/>\r\n\r\n        <label>Hora</label>\r\n        <input type=\"time\" name=\"hora\" className=\"u-full-width\" onChange={actualizarState} value={hora}/>\r\n\r\n        <label>Sintomas</label>\r\n            <textarea className=\"u-full-width\" name=\"sintomas\" onChange={actualizarState} value={sintomas}>\r\n            </textarea>\r\n            <button type=\"submit\" className=\"u-full-width button-primary\">\r\n                Agregar Cita\r\n            </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nFormulario.propTypes ={\r\n  crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\n\r\nconst Cita = ({cita, eliminarCita}) => ( \r\n    <div className=\"cita\">\r\n        <p>Mascota:<span>{cita.mascota}</span></p>\r\n        <p>Propietario:<span>{cita.propietario}</span></p>\r\n        <p>Fecha:<span>{cita.fecha}</span></p>\r\n        <p>Hora:<span>{cita.hora}</span></p>\r\n        <p>Sintomas:<span>{cita.sintomas}</span></p>\r\n\r\n        <button className=\"button eliminar u-full-width\"\r\n        onClick={ ()=> eliminarCita(cita.id)}>\r\n            Eliminar &times;\r\n        </button>\r\n    </div>\r\n );\r\n\r\n\r\nexport default Cita;","import React, {Fragment, useState, useEffect} from \"react\";\nimport Formulario from './Components/Formulario'\nimport Cita from './Components/Cita'\n\n\nfunction App() {\n\n  //Citas en local Storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n      citasIniciales = [];\n\n  }\n\n  //Arreglo de citas\n  const [citas, guardarCitas]= useState(citasIniciales);\n\n\n  //UseEffect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  //Funcion que tome las citas actuales, guarda una copia y agrega la siguiente\n  const crearCita = cita =>{\n    guardarCitas ([\n      ...citas,\n      cita\n    ]);\n   \n  }\n\n//funcion que elimina una cita por ID\nconst eliminarCita = id =>{\n  const nuevasCitas = citas.filter(cita => cita.id !== id);\n  guardarCitas(nuevasCitas);\n}\n\n//mensaje condicional\n\nconst titulo= citas.length === 0 ? 'No hay citas' : 'Administra tus citas'\n\n  return (\n    <Fragment>\n      <h1> Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\"> <Formulario  crearCita={crearCita}/></div>\n          <div className=\"one-half column\"> \n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n              key={cita.id}\n              cita={cita}\n              eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}